---
- name: check if kubeconfig kubelet.conf already exists
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubeconfig_kubelet_stats

- name: generate kubeadm.config
  ansible.builtin.template:
    src: kubeadm.config.j2
    dest: /etc/kubernetes/kubeadm.config
  register: kubeadm_config

### cluster not yet initialized

- name: create new cluster
  when: not kubeconfig_kubelet_stats.stat.exists
  block:
    #### kubeadm wants token to come from --config if --config is used
    #### i think this is stupid -> TODO: send bug report
    # - name: generate bootstrap token for new cluster
    #   ansible.builtin.command: kubeadm token generate
    #   changed_when: False
    #   check_mode: no
    #   register: kubeadm_token_generate

    - name: initialize kubernetes master and store log
      block:
        - name: initialize the kubernetes primary master
          ansible.builtin.command: |
            kubeadm
            init
            --config /etc/kubernetes/kubeadm.config
            --cri-socket {{ kubernetes_cri_socket }}
            --skip-phases addon/kube-proxy
            --skip-token-print
          args:
            creates: /etc/kubernetes/pki/ca.crt
          register: kubeadm_init

      always:
        - name: dump output of kubeadm init to log file
          when: kubeadm_init.changed
          ansible.builtin.copy:
            content: "{{ kubeadm_init.stdout }}\n"
            dest: /etc/kubernetes/kubeadm-init.log

        - name: dump error output of kubeadm init to log file
          when: kubeadm_init.changed and kubeadm_init.stderr
          ansible.builtin.copy:
            content: "{{ kubeadm_init.stderr }}\n"
            dest: /etc/kubernetes/kubeadm-init.errors

    - name: create bootstrap token for existing cluster
      ansible.builtin.command: kubeadm token create --ttl 42m
      check_mode: no
      register: kubeadm_token_generate
      no_log: true
      changed_when: false  # this doesn't change cluster state

### cluster is already initialized but something in the config has changed

- name: get cluster facts
  when: kubeconfig_kubelet_stats.stat.exists
  block:
    - name: get cluster version
      ansible.builtin.command: kubectl version -o yaml
      register: kubectl_version
      check_mode: false
      changed_when: false  # readonly command

    - name: Set cluster version fact
      ansible.builtin.set_fact:
        kubectl_cluster_version: "{{ kubectl_version.stdout | from_yaml }}"

    - name: Set cluster git version fact
      ansible.builtin.set_fact:
        kubectl_cluster_git_version: "{{ kubectl_cluster_version.serverVersion.gitVersion | replace('v', '') }}"

### config has changed

- name: change cluster config
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubernetes_version is version(kubectl_cluster_git_version, '==')
    - kubeadm_config is changed
  block:
    # TODO: "kubeadm upgrade" unfortunately isn't enough
    #        this likely needs a full "kubeadm reset", "kubectl delete node" + "kubeadm join" for all master nodes and probably all others too
    - name: fail for cluster config changes
      ansible.builtin.fail:
        msg: "changing the cluster config is currently not supported!"

### version has changed

- name: upgrade cluster version
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubernetes_version is version(kubectl_cluster_git_version, '>')
  block:
    - name: kudeadm upgrade plan
      ansible.builtin.command: kubeadm upgrade plan
      register: kubeadm_plan
      # Run even in check mode
      check_mode: false
      changed_when: false  # readonly command

    - name: Check for warnings
      ansible.builtin.debug:
        msg: "{{ kubeadm_plan.stdout }}"

    - name: prompt for resume
      ansible.builtin.pause:
        prompt: Please check the last output for warnings. Confirm you if want to resume the upgrade! Press return to continue. Press Ctrl+c and then "a" to abort

    - name: upgrade primary master
      ansible.builtin.command: "kubeadm upgrade apply v{{ kubernetes_version }} -y"
      changed_when: true  # this will nearly always cause a change anyways

    - name: upgrade other nodes
      ansible.builtin.command: kubeadm upgrade node
      delegate_to: "{{ item }}"
      loop: "{{ groups[kubernetes_group_name] }}"
      changed_when: true  # this will nearly always cause a change anyways

### cluster is already initialized, nothing has changed in the config

- name: prepare cluster for new nodes
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubeadm_config is not changed
  block:
    - name: fetch list of current nodes
      ansible.builtin.command: kubectl --kubeconfig /etc/kubernetes/admin.conf get nodes -o name
      changed_when: False
      check_mode: no
      register: kubectl_node_list

    - name: save list of current nodes
      ansible.builtin.set_fact:
        kubernetes_current_nodes: "{{ kubectl_node_list.stdout_lines | map('replace', 'node/', '') | list }}"

    - name: create bootstrap token for existing cluster
      when: "groups[kubernetes_group_name] | map('extract', hostvars) | map(attribute='ansible_nodename') | difference(kubernetes_current_nodes) | length > 0"
      ansible.builtin.command: kubeadm token create --ttl 42m
      check_mode: no
      register: kubeadm_token_create
      no_log: true
      changed_when: false  # this doesn't really change cluster state

## calculate certificate digest

- name: install openssl
  ansible.builtin.apt:
    name: openssl
    state: present

- name: get ca certificate digest
  ansible.builtin.shell: "set -o pipefail && openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'"
  args:
    executable: /bin/bash
  check_mode: no
  register: kube_ca_openssl
  changed_when: False

- name: set variables needed by kubernetes/nodes to join the cluster
  ansible.builtin.set_fact:
    kube_bootstrap_token: "{% if kubeadm_token_generate.stdout is defined %}{{ kubeadm_token_generate.stdout }}{% elif kubeadm_token_create.stdout is defined %}{{ kubeadm_token_create.stdout }}{% endif %}"
    kube_bootstrap_ca_cert_hash: "sha256:{{ kube_ca_openssl.stdout }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  loop: "{{ groups[kubernetes_group_name] }}"
  no_log: true
