---
- name: Generate kubeadm.config
  ansible.builtin.template:
    src: kubeadm.config.j2
    dest: /etc/kubernetes/kubeadm.config
  register: kubeadm_config

### Several options possible, depending on what happened:

### The cluster was not yet initialized at all
- name: Initialize a new cluster
  when: not kubeconfig_kubelet_stats.stat.exists
  ansible.builtin.include_tasks: initialize-cluster.yml

### The cluster is now initialized but something in the config might be changed, so we need more info about it
- name: Get cluster facts
  block:
    - name: Get cluster version
      ansible.builtin.command: kubectl version -o yaml
      register: kubectl_version
      check_mode: false
      changed_when: false # readonly command

    - name: Set cluster version fact
      ansible.builtin.set_fact:
        kubectl_cluster_version: "{{ kubectl_version.stdout | from_yaml }}"

    - name: Set cluster git version fact
      ansible.builtin.set_fact:
        kubectl_cluster_git_version: "{{ kubectl_cluster_version.serverVersion.gitVersion | replace('v', '') }}"

    - name: Fetch list of current nodes
      ansible.builtin.command: kubectl get nodes -o name
      changed_when: false # readonly command
      check_mode: false
      register: kubectl_node_list

    - name: Save list of current nodes
      ansible.builtin.set_fact:
        kubernetes_current_nodes: "{{ kubectl_node_list.stdout_lines | map('replace', 'node/', '') | list }}"

### Using the additional infos, we see that either:

### The cluster version has changed
### TODO: Add check to disallow simultaneous config + version changes, since kubeadm upgrade might not support this
- name: Upgrade the cluster version
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubernetes_version is version(kubectl_cluster_git_version, '>')
  ansible.builtin.include_tasks: upgrade-initial-control-plane-node.yml
- name: Downgrade the cluster version
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubernetes_version is version(kubectl_cluster_git_version, '<')
  ansible.builtin.include_tasks: downgrade-initial-control-plane-node.yml

### The config has changed, but the cluster version is still the same
- name: Reconfigure the cluster
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubernetes_version is version(kubectl_cluster_git_version, '==')
    - kubeadm_config is changed
  block:
    # TODO: "kubeadm upgrade" unfortunately isn't enough here, it only handles version changes
    #        this likely needs a full "kubeadm reset", "kubectl delete node" + "kubeadm join" for all control plane nodes and probably all other nodes too
    - name: Fail for cluster config changes
      ansible.builtin.fail:
        msg: changing the cluster config is currently not supported!

### The cluster is already initialized, nothing has changed in the config but there are still nodes to be joined

- name: Create bootstrap token for new nodes
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubeadm_config is not changed
    - groups[kubernetes_group_name] | map('extract', hostvars) | map(attribute='ansible_nodename') | difference(kubernetes_current_nodes) | length > 0
  ansible.builtin.command: kubeadm token create --ttl 42m
  check_mode: false
  register: kubeadm_token_create
  no_log: true
  changed_when: false # this doesn't really change cluster state

- name: Upload certificates for new control plane nodes
  when:
    - kubeconfig_kubelet_stats.stat.exists
    - kubeadm_config is not changed
    - groups[kubernetes_control_plane_nodes_group_name] | map('extract', hostvars) | map(attribute='ansible_nodename') | difference(kubernetes_current_nodes) | length
      > 0
  # noqa no-changed-when - yes, this is not idempotent
  # TODO: Get rid of the group name in there as well as in other tasks like this, this should be possible to infer otherwise
  ansible.builtin.command: kubeadm init phase upload-certs --upload-certs
  check_mode: false
  register: kubeadm_upload_certs
  no_log: true

## calculate certificate digest
# TODO: Replace with community.crypto.x509_certificate_info module
- name: Install openssl
  ansible.builtin.apt:
    name: openssl
    state: present
- name: Get CA certificate digest
  ansible.builtin.shell: set -o pipefail && openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256
    -hex | sed 's/^.* //'
  args:
    executable: /bin/bash
  check_mode: false
  register: kube_ca_openssl
  changed_when: false

- name: Set variables needed by kubernetes/nodes to join the cluster on all cluster nodes
  ansible.builtin.set_fact:
    kube_bootstrap_token: "{% if kubeadm_token_generate.stdout is defined %}{{ kubeadm_token_generate.stdout }}{% elif kubeadm_token_create.stdout is defined %}{{
      kubeadm_token_create.stdout }}{% endif %}"
    kube_bootstrap_ca_cert_hash: sha256:{{ kube_ca_openssl.stdout }}
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups[kubernetes_group_name] }}"
  no_log: true
