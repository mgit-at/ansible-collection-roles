---
# TODO: Fix this, this is currently broken due to trying to pin/install package names that are invalid on new mirrors.
# Also upgrades now require switching mirrors first.
# TODO: Write a test scenario for this.

- name: Run pre-upgrade tasks on all nodes in the cluster
  loop: "{{ groups[kubernetes_group_name] }}"
  ansible.builtin.include_tasks: prepare_nodes_upgrade.yml
- name: Kudeadm upgrade plan
  ansible.builtin.command: kubeadm upgrade plan
  register: kubeadm_plan
  check_mode: false # Run even in check mode
  changed_when: false # Read-only command
- name: Let user check for warnings manually
  ansible.builtin.debug:
    msg: "{{ kubeadm_plan.stdout }}"
- name: Prompt for resume
  when: kubernetes_autoupgrade is not defined
  ansible.builtin.pause:
    prompt: Please check the last output for warnings. Confirm you if want to resume the upgrade! Press return to continue. Press Ctrl+c and then "a" to abort
  # TODO: Drain sometimes get stuck
- name: Drain node
  # noqa no-changed-when - yes, this is not idempotent
  ansible.builtin.command: kubectl drain {{ ansible_nodename }} --ignore-daemonsets --delete-local-data --force
- name: Upgrade initial control plane node
  # noqa no-changed-when - yes, this is not idempotent
  # This will take the current cluster config inside the cluster and change the version in there
  # If you modified /etc/kubernetes/kubeadm.config, it first needs to be uploaded (with the initial version)
  # for changes to be applied by kubeadm in addition to the version change.
  # This is done with this command: kubeadm init phase upload-config kubeadm --config=/etc/kubernetes/kubeadm.config
  # Kubeadm will NOT care about the contents of this file, it only takes/uses what's in the cluster!
  ansible.builtin.command: kubeadm upgrade apply v{{ kubernetes_version }} -y

- name: Unhold kubelet & kubectl
  # noqa no-changed-when - yes, this is not idempotent
  loop:
    - kubelet
    - kubectl
  ansible.builtin.command: apt-mark unhold {{ item }}

- name: Update kubelet & kubectl
  # noqa no-changed-when - yes, this is not idempotent
  ansible.builtin.apt:
    name:
      - kubelet={{ kubernetes_version }}-1.1
      - kubectl={{ kubernetes_version }}-1.1
    state: present

- name: Hold kubelet & kubectl
  # noqa no-changed-when - yes, this is not idempotent
  loop:
    - kubelet
    - kubectl
  ansible.builtin.command: apt-mark hold {{ item }}

- name: Force kubelet certificate rotation (it gets regenerated after reboot)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /var/lib/kubelet/pki/kubelet.crt
    - /var/lib/kubelet/pki/kubelet.key

- name: Upgrade and reboot host OS on initial control plane node
  ansible.builtin.import_role:
    name: upgrade_host

- name: Uncordon initial control plane node
  # noqa no-changed-when - yes, this is not idempotent
  ansible.builtin.command: kubectl uncordon {{ ansible_nodename }}
  retries: 50
  delay: 5
  register: uncordon_node
  until: uncordon_node.rc == 0
- name: Wait up to 5 minutes until all pods are ready and running on the node again
  ansible.builtin.command: kubectl wait --for=condition=Ready --field-selector='spec.nodeName={{ ansible_nodename }}' --timeout=300s -A --all pods
  changed_when: false # Read-only command

# Remove apt fragments:
- name: Run apt-get autoremove
  ansible.builtin.apt:
    autoremove: true

- name: Run apt-get autoclean
  ansible.builtin.apt:
    autoclean: true

- name: Run apt-get clean
  ansible.builtin.apt:
    clean: true
